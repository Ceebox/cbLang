include error;

class Parser
{
    function Start(code : str)
    {
        //Pass in code
        this.code = code;
        //Parse code
        this.code = this.Parse(this.code);
    }

    function Parse(code: str) is str
    {
        //Parse everything into normal python
        code = this.ParseInclude(code);
        code = this.ParseComments(code);
        code = this.ParseKeyWords(code);
        code = this.ParseEOL(code);
        code = this.ParseBraces(code);
        code = this.ParseFunctions(code);
        code = this.CleanCode(code);
        code = this.AddEntryPoint(code);

        //Dump code to file
        with open("output.py", "w") as f
        {
            f.write(code);
        }
        return code;
    }
     
    function ParseComments(code: str) is str
    {
        for line in code.splitlines()
        {
            if "//" in line
            {
                if not this.IsInString("//", line)
                {
                    if list(line)[0] == "/"
                    {
                        if list(line)[1] == "/"
                        {
                            code = code.replace(line, "");
                        }
                    }
                    else
                    {
                        newLine = line.partition("//")[0];
                        code = code.replace(line, newLine);  
                    } 
                }
            } 
        }               
        return code;
    }

    function ParseInclude(code: str) is str
    {
        includeName = "";
        for line in code.splitlines()
        {
            words = line.split();
            for wordNo, word in enumerate(words)
            {
                if words[wordNo] == "from"
                {
                    if not this.IsInString(words[wordNo], line)
                    {
                        if words[wordNo + 1]== "native"
                        {
                            if words[wordNo + 2] == "include"
                            {
                                words[wordNo + 3] = words[wordNo + 3].replace(";", "");
                                code = code.replace(line, (f"from {words[wordNo + 3]} import *"));
                            }
                        }
                    }
                }
            }
        }
        for line in code.splitlines()
        {
            words = line.split();
            for wordNo, word in enumerate(words)
            {
                if "from" in line
                {
                    continue;
                }
                if word == "include"
                {
                    if not this.IsInString(word, line)
                    {
                        includeName = words[wordNo + 1];
                        code = code.replace(line, "");
                        with open(includeName.removesuffix(";") + ".cb", "r") as file
                        {
                            code = file.read() + "\n" + code;
                        }
                    }
                }
            }
        }
        for line in code.splitlines()
        {
            if "from native reference " in line
            {
                if this.IsInString("from native reference ", line, true)
                {
                    continue;
                }
                code = code.replace(line, line.replace("from native reference ", "import "));
                words = line.split();
                newLine = "";
                for wordNo, word in enumerate(words)
                {
                    if words[wordNo] == "from"
                    {
                        if not this.IsInString(words[wordNo], line)
                        {
                            if words[wordNo + 1] == "native"
                            {
                                if words[wordNo + 2] == "reference"
                                {
                                    words[wordNo] = "import";
                                    words[wordNo] = "";
                                    words[wordNo + 2] = "";
                                    newLine = " ".join(words);
                                }
                            }
                        }
                    }
                }
                if newLine != ""
                {
                    code = code.replace(line, newLine);
                }
            }
        }
        return code;
    }

    function ParseKeyWords(code: str) is str
    {
        for line in code.splitlines()
        {
            if "true" in line
            {
                if not this.IsInString("true", line)
                {
                    code = code.replace(line, line.replace("true", "True"));
                }
            }
        }
        for line in code.splitlines()
        {
            if "false" in line
            {
                if not this.IsInString("false", line)
                {
                    code = code.replace(line, line.replace("false", "False"));
                }
            }
        }
        for line in code.splitlines()
        {
            if "null" in line
            {
                if not this.IsInString("null", line)
                {
                    code = code.replace(line, line.replace("null", "None"));
                }
            }
        }
        for line in code.splitlines()
        {
            if "else if" in line
            {
                if not this.IsInString("else if", line, false):
                    code = code.replace(line, line.replace("else if", "elif"));
            }
        }
        return code;
    }

    function ParseEOL(code: str) is str
    {
        code = "".join([s for s in code.splitlines(true) if s.strip("\r\n")]);

        for line in code.splitlines()
        {
            skipLine = false;
            for token in ("function", "while", "for", "if", "else", "elif", "with", "from")
            {
                if token in line
                {
                    if not this.IsInString(token, line)
                    {
                        skipLine = true;
                    }
                }
            }
            if ''.join(line.split()).startswith(("{", "}", "\n", "class"))
            {
                skipLine = true;
            }
            else if line.strip() == ""
            {
                skipLine = true;
            }
            if skipLine
            {
                continue;
            }
            if ";" in line
            {
                if not this.IsInString(";", line)
                {
                    lineChars = list(line);
                    stringCount = 0;
                    for i in range(len(lineChars))
                    {
                        if lineChars[i] == '"' or lineChars[i] == "'"
                        {
                            stringCount += 1;
                        }
                        if lineChars[i] == ";"
                        {
                            if stringCount % 2 == 0
                            {
                                lineChars[i] = "\n";
                                break;
                            }
                        }
                    }
                }
            }

            else if line.endswith((":"))
            {
                Error(f"Syntax error in: \n{line}");
            }
            else
            {
                Error(f"Missing semicolon in: \n{line}");
            }
            if line.endswith((":"))
            {
                Error(f"Syntax error in: \n{line}");
            }
        }

        return code;
    }

    function ParseBraces(code: str) is str
    {
        leftBracesAmount = 0;
        for line in code.splitlines()
        {
            if "{" in line
            {
                lineChars = list(line);
                stringCount = 0;
                for i in range(len(lineChars))
                {
                    if lineChars[i] == '"' or lineChars[i] == "'"
                    {
                        stringCount += 1;
                    }
                    if lineChars[i] == "{"
                    {
                        if stringCount % 2 == 0
                        {
                            if stringCount != 0
                            {
                                leftBracesAmount += 1;
                                break;
                            }
                        }
                    }
                }
            }
        }
        rightBracesAmount = 0;
        for line in code.splitlines()
        {
            if "}" in line
            {
                lineChars = list(line);
                stringCount = 0;
                for i in range(len(lineChars))
                {
                    if lineChars[i] == '"' or lineChars[i] == "'"
                    {
                        stringCount += 1;
                    }
                    if lineChars[i] == "}"
                    {
                        if stringCount % 2 == 0
                        {
                            if stringCount != 0
                            {
                                rightBracesAmount += 1;
                                break;
                            }
                        }
                    }
                }
            }
        }

        if leftBracesAmount != rightBracesAmount
        {
            Error(("Braces amount is not equal"));
        }

        newCode = "";
        splitLines = code.splitlines();
        for line in splitLines
        {
            if ";" in line
            {
                if not this.IsInString(";", line)
                {
                    lineChars = list(line);
                    stringCount = 0;
                    for i in range(len(lineChars))
                    {
                        if lineChars[i] == '"' or lineChars[i] == "'"
                        {
                            stringCount += 1;
                        }
                        if lineChars[i] == ";"
                        {
                            if stringCount % 2 == 0
                            {
                                lineChars[i] = "\n";
                                break;
                            }
                        }
                    }
                    line = "".join(lineChars);
                }
            }
            if "class" in line
            {
                if not this.IsInString("class", line)
                {
                    line = "\n"+" ".join(line.split());
                }
            }
            if "function" in line
            {
                if not this.IsInString("function", line, false)
                {
                    line = line.replace("function", "def");
                }
            }
            leftBraceExpression = ''.join(line.split());
            if not this.IsInString("{", leftBraceExpression)
            {
                if ''.join(line.split()).startswith(("{"))
                {
                    newCode += ":\n";
                }
            }
            if not this.IsInString("}", line)
            {
                line = line.replace("}", "#endindent");
            }
            if not this.IsInString("{", line)
            {
                line = line.replace("{", "#startindent");
            }
            line += "\n";
            newCode += line;
            line += "\n";
        }

        return newCode;
    }

    function ParseFunctions(code: str) is str
    {
        code = code;
        for line in code.splitlines()
        {
            if "function" in line
            {
                if not this.IsInString("function", line, false)
                {
                    code = code.replace(line, line.replace("function", "def"));
                }
            }
        }
        for line in code.splitlines()
        {
            if "def Start" in line
            {
                if not this.IsInString("def Start", line)
                {
                    code = code.replace(line, line.replace("def Start", "def __init__"));
                }
            }
        }
        for line in code.splitlines()
        {
            if ") is" in line
            {
                if not this.IsInString(") is", line)
                {
                    code = code.replace(line, line.replace(") is", ") ->"));
                }
            }
        }
        for line in code.splitlines()
        {
            if "def" in line
            {
                if (line.partition("def")[0].strip() == "")
                {
                    code = code.replace(line, line.replace("(", "(this,"));
                }
            }
        }
        newCode = [];
        for count, line in enumerate(code.splitlines())
        {
            if "static " in line
            {
                if not this.IsInString("static ", line, false)
                {
                    newCode.insert(count - 1, "        @staticmethod");
                    line = line.replace(line, line.replace("static ", ""));
                }
            }
            newCode.append(line);
        }
        code = "\n".join(newCode);

        return code;
    }

    function CleanCode(code : str) is str
    {
        //I'm not going to lie, I made a lot of mistakes. Let's hope these hacks fix it.

        newCode = "";
        for line in code.splitlines()
        {
            chars = "";
            for c in line
            {
                if "t"+"his" in line
                {
                    if not this.IsInString(("t"+"his"), line)
                    {
                        line = line.replace(("t"+"his"), "self");
                    }
                }
            }
            newCode += line + "\n";
        }
        code = newCode;

        splitLines = code.splitlines();
        for lineNo, line in enumerate(splitLines)
        {
            if line.startswith(":")
            {
                splitLines[lineNo - 1] = splitLines[lineNo - 1] + ":";
                splitLines[lineNo] = "";
            }
        }
        newCode = "";
        for line in splitLines
        {
            newCode += line + "\n";
        }
        code = newCode;

        splitLines = code.splitlines();
        newCode = "";
        for lineNo, line in enumerate(splitLines)
        {
            i = 0;
            indentCount = 0;
            while i <= lineNo
            {
                if "#endindent" in splitLines[i]
                {
                    if not this.IsInString("#endindent", splitLines[i], true)
                    {
                        indentCount -= 1;
                    }
                }
                    
                else if "#startindent" in splitLines[i]
                {
                    if not this.IsInString("#startindent", splitLines[i], true)
                    {
                        if not this.IsInString("#startindent", splitLines[i])
                        {
                            indentCount += 1;
                        }
                    }
                }
                i += 1;
            }
            newCode += ("    " * indentCount) + line + "\n";
        }
        code = newCode;

        //Remove indent helpers
        newCode = "";
        for line in code.splitlines()
        {
            if "#endindent" in line
            {
                if not this.IsInString("#endindent", line)
                {
                    line = line.replace(line, "");
                }
            }
            if "#startindent" in line
            {
                if not this.IsInString("#startindent", line)
                {
                    line = line.replace(line, "");
                }
            }
            newCode += line + "\n";
        }
        code = newCode;

        //Tidy code by removing empty lines
        newCode = "";
        for line in code.splitlines()
        {
            if line.strip("\t\r\n") == ""
            {
                line = line.replace(line, line.strip("\t\r\n"));
                newCode += line;
            }
            else
            {
                newCode += line + "\n";
            }
        }
        code = newCode;

        code = "\n".join([ll.rstrip() for ll in code.splitlines() if ll.strip()]);

        return code;
    }

    function AddEntryPoint(code: str) is str
    {
        code += "\n";
        code += "if __name__ == \"__main__\":\n\tmain = Main()\n\tmain.Main()";

        return code;
    }

    function IsInString(phrase : str, line : str, returnIfMultiple = false, returnIfNotInLine = false) is bool
    {
        if not phrase in line
        {
            return returnIfNotInLine;
        }
        if line.count(phrase) > 1
        {
            return returnIfMultiple;
        }

        leftSide = line.partition(phrase)[0];
        if leftSide.count("\"") > 0
        {
            if leftSide.count("\"") % 2 == 0
            {
                return false;
            }
            else
            {
                return true;
            }
        }

        if leftSide.count("\'") > 0
        {
            if leftSide.count("\'") % 2 == 0
            {
                return false;
            }
            else
            {
                return true;
            }
        }
    }
}